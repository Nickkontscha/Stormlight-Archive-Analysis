{
    "collab_server" : "",
    "contents" : "# https://www.tidytextmining.com/twitter.html\n\nlibrary(tidyr)\nlibrary(tidytext)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggthemr)\nlibrary(gridExtra)\n\nsource(\"loadData/loadData.R\")\n\nAllBooks <- AllBooks[, c(\"chapter\", \"nr\", \"text\", \"character\", \"book\", \"flashback\")]\nAllBooks <- AllBooks[!is.na(AllBooks$nr),]\n\nrm(list=setdiff(ls(), \"AllBooks\"))\n\nggthemr('fresh', layout = \"minimal\")\n\nrelChars <- c(\"kaladin\", \"shallan\", \"dalinar\")\n\nstopwords <- stop_words$word\nstopwords <- c(stopwords, gsub(\"[^[:alnum:][:space:]]\", \"\", stopwords))\n\nAllBooks$text <- tolower(AllBooks$text)\nAllBooks$text <- paste(\" \", AllBooks$text)\nAllBooks$text <- gsub(\"(\\\\skaladins\\\\s|\\\\skal\\\\s|\\\\skals\\\\s)\", \" kaladin \", AllBooks$text)\nAllBooks$text <- gsub(\"(\\\\sshalans\\\\s)\", \" shallan \", AllBooks$text)\nAllBooks$text <- gsub(\"(\\\\sdalinars\\\\s)\", \" dalinar \", AllBooks$text)\n\n\nWoK <- AllBooks[AllBooks$book == \"Way Of Kings\", c(\"nr\", \"text\")]\nWoR <- AllBooks[AllBooks$book == \"Words Of Radiance\", c(\"nr\", \"text\")]\nOath <- AllBooks[AllBooks$book == \"Oathbringer\", c(\"nr\", \"text\")]\n\nWoK$index <- seq(1, nrow(WoK), 1)\nWoR$index <- seq(1, nrow(WoR), 1)\nOath$index <- seq(1, nrow(Oath), 1)\n\nWoK_tokens <- WoK %>% \n  select(text, index) %>% \n  unnest_tokens(word, text) %>% \n  count(index, word, sort = TRUE) %>% \n  ungroup() %>% \n  filter(word %in% relChars) %>% \n  arrange(index)\n\nWoR_tokens <- WoR %>% \n  select(text, index) %>% \n  unnest_tokens(word, text) %>% \n  count(index, word, sort = TRUE) %>% \n  ungroup() %>% \n  filter(word %in% relChars) %>% \n  arrange(index)\n\nOath_tokens <- Oath %>% \n  select(text, index) %>% \n  unnest_tokens(word, text) %>% \n  count(index, word, sort = TRUE) %>% \n  ungroup() %>% \n  filter(word %in% relChars) %>% \n  arrange(index)\n\nWoK_tokens$word <- gsub(\"kaladin\", \"Kaladin\", WoK_tokens$word)\nWoK_tokens$word <- gsub(\"shallan\", \"Shallan\", WoK_tokens$word)\nWoK_tokens$word <- gsub(\"dalinar\", \"Dalinar\", WoK_tokens$word)\n\nWoR_tokens$word <- gsub(\"kaladin\", \"Kaladin\", WoR_tokens$word)\nWoR_tokens$word <- gsub(\"shallan\", \"Shallan\", WoR_tokens$word)\nWoR_tokens$word <- gsub(\"dalinar\", \"Dalinar\", WoR_tokens$word)\n\nOath_tokens$word <- gsub(\"kaladin\", \"Kaladin\", Oath_tokens$word)\nOath_tokens$word <- gsub(\"shallan\", \"Shallan\", Oath_tokens$word)\nOath_tokens$word <- gsub(\"dalinar\", \"Dalinar\", Oath_tokens$word)\n\nWoK_tokens$word <- factor(WoK_tokens$word, levels = c(\"Kaladin\", \"Shallan\", \"Dalinar\"))\nWoR_tokens$word <- factor(WoR_tokens$word, levels = c(\"Kaladin\", \"Shallan\", \"Dalinar\"))\nOath_tokens$word <- factor(Oath_tokens$word, levels = c(\"Kaladin\", \"Shallan\", \"Dalinar\"))\n\n\nadjust <- 0.3\nheight <- 0.05\nd1 <- ggplot(WoK_tokens, aes(x = n, fill = word)) +\n  geom_density(alpha = 0.33,\n               adjust = adjust) +\n  scale_y_continuous(limit = c(0, height)) + \n  theme(legend.position=\"none\") +\n  labs( x = \" \",\n        y = \"Density\")\n\nd2 <- ggplot(WoR_tokens, aes(x = n, fill = word)) +\n  geom_density(alpha = 0.33,\n               adjust = adjust) +\n  scale_y_continuous(limit = c(0, height)) + \n  theme(legend.position=\"none\") +\n  labs( x = \"Chapter Number\",\n        y = NULL)\n\nd3 <- ggplot(Oath_tokens, aes(x = n, fill = word)) +\n  geom_density(alpha = 0.33,\n               adjust = adjust) +\n  scale_y_continuous(limit = c(0, height)) +\n  labs( x = \" \",\n        y = NULL)\n\ngrid.arrange(d1, d2, d3, ncol = 3)\n\n######\n\n\nWoK_tokens <- spread(WoK_tokens, key = word, value = n) %>% \n  replace_na(list(Kaladin = 0, Shallan = 0, Dalinar = 0)) %>% \n  gather(word, n, -index)\n\nWoR_tokens <- spread(WoR_tokens, key = word, value = n) %>% \n  replace_na(list(Kaladin = 0, Shallan = 0, Dalinar = 0)) %>% \n  gather(word, n, -index)\n\nOath_tokens <- spread(Oath_tokens, key = word, value = n) %>% \n  replace_na(list(Kaladin = 0, Shallan = 0, Dalinar = 0)) %>% \n  gather(word, n, -index)\n\nWoK_fun = function(vec){ as.numeric(vec[3]) / sum(WoK_tokens$n[ WoK_tokens$index == as.numeric(vec[1]) ]) *100 }\nWoR_fun = function(vec){ as.numeric(vec[3]) / sum(WoR_tokens$n[ WoR_tokens$index == as.numeric(vec[1]) ]) *100 }\nOath_fun = function(vec){ as.numeric(vec[3]) / sum(Oath_tokens$n[ Oath_tokens$index == as.numeric(vec[1]) ]) *100 }\n\nWoK_tokens$prop = apply(WoK_tokens , 1 , WoK_fun)\nWoR_tokens$prop = apply(WoR_tokens , 1 , WoR_fun)\nOath_tokens$prop = apply(Oath_tokens , 1 , Oath_fun)\n\nWoK_tokens$word <- factor(WoK_tokens$word, levels = c(\"Kaladin\", \"Shallan\", \"Dalinar\"))\nWoR_tokens$word <- factor(WoR_tokens$word, levels = c(\"Kaladin\", \"Shallan\", \"Dalinar\"))\nOath_tokens$word <- factor(Oath_tokens$word, levels = c(\"Kaladin\", \"Shallan\", \"Dalinar\"))\n\ndd1 <- ggplot(WoK_tokens, aes(x = index, y = prop, fill = word)) + \n  geom_area(alpha=0.6 , size=.5, colour=\"black\")+\n  labs( x = \" \",\n        y = \"Percentage\") + \n  theme(legend.position = \"top\",\n      legend.margin=margin(t = 0, unit='cm'),\n      legend.text = element_text(color = \"white\"),\n      legend.title = element_text(color = \"white\"),\n      legend.key = element_rect(fill = \"white\")) + \n  scale_fill_discrete(\n    guide = guide_legend(override.aes = list(fill = \"white\",\n                                             color = \"white\"))\n  )\n\ndd2 <- ggplot(WoR_tokens, aes(x = index, y = prop, fill = word)) + \n  geom_area(alpha=0.6 , size=.5, colour=\"black\") +\n  labs( x = \"Chapter\",\n        y = \"\",\n        fill = \"Character: \") + \n  theme(legend.position = \"top\",\n        legend.margin=margin(t = 0, unit='cm'))\n\ndd3 <- ggplot(Oath_tokens, aes(x = index, y = prop, fill = word)) + \n  geom_area(alpha=0.6 , size=.5, colour=\"black\") +\n  labs( x = \" \",\n        y = \" \")  +\n  theme(legend.position = \"top\",\n        legend.margin=margin(t = 0, unit='cm'),\n        legend.text = element_text(color = \"white\"),\n        legend.title = element_text(color = \"white\"),\n        legend.key = element_rect(fill = \"white\")) + \n  scale_fill_discrete(\n    guide = guide_legend(override.aes = list(fill = \"white\",\n                                             color = \"white\"))\n  )\n\ngrid.arrange(dd1, dd2, dd3, ncol = 3)\n\n\n",
    "created" : 1536431816607.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3814697798",
    "id" : "3AD2CBB5",
    "lastKnownWriteTime" : 1536175044,
    "last_content_update" : 1536175044,
    "path" : "C:/Users/swesd/Desktop/NLP/SA_nlp/WorFreq.R",
    "project_path" : "WorFreq.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}